<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Thêm thu nhập mới</h5>
        <button type="button" class="btn btn-sm btn-outline-primary" id="toggleIncomeForm">
          <i class="bi bi-plus"></i> Mở form
        </button>
      </div>
      <div class="card-body" id="income-form-container" style="display: none;">
        <form id="income-form" class="row g-3">
          <div class="col-md-6">
            <label for="description" class="form-label">Mô tả</label>
            <input type="text" class="form-control" id="description" required>
            <div class="invalid-feedback">Vui lòng nhập mô tả</div>
          </div>
          <div class="col-md-3">
            <label for="amount" class="form-label">Số tiền</label>
            <div class="input-group">
              <input type="number" class="form-control" id="amount" min="1000" step="1000" required>
              <span class="input-group-text">VND</span>
            </div>
            <div class="invalid-feedback">Số tiền phải lớn hơn 0</div>
          </div>
          <div class="col-md-3">
            <label for="date" class="form-label">Ngày</label>
            <input type="date" class="form-control" id="date" required>
            <div class="invalid-feedback">Vui lòng chọn ngày</div>
          </div>
          <div class="col-md-6">
            <label for="source" class="form-label">Nguồn thu nhập</label>
            <select id="source" class="form-select" required>
              <option value="">-- Chọn nguồn thu --</option>
              <option value="salary">Lương</option>
              <option value="bonus">Thưởng</option>
              <option value="investment">Đầu tư</option>
              <option value="freelance">Freelance</option>
              <option value="gift">Quà tặng</option>
              <option value="other">Khác</option>
            </select>
            <div class="invalid-feedback">Vui lòng chọn nguồn thu nhập</div>
          </div>
          <div class="col-md-6">
            <div class="form-check mt-4">
              <input class="form-check-input" type="checkbox" id="isRecurring">
              <label class="form-check-label" for="isRecurring">
                Thu nhập lặp lại
              </label>
            </div>
          </div>
          <div class="col-md-12" id="frequency-group" style="display: none;">
            <label class="form-label">Tần suất</label>
            <select id="frequency" class="form-select">
              <option value="weekly">Hàng tuần</option>
              <option value="monthly" selected>Hàng tháng</option>
              <option value="yearly">Hàng năm</option>
            </select>
          </div>
          <div class="col-12 mt-3">
            <button type="submit" class="btn btn-primary" id="submit-income">Lưu</button>
            <button type="button" class="btn btn-outline-secondary" id="clear-income-form">Xoá form</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">Danh sách thu nhập</h5>
      </div>
      <div class="card-body">
        <div class="income-filter mb-4">
          <div class="row">
            <div class="col-md-3 mb-2">
              <label class="form-label">Từ ngày</label>
              <input type="date" id="filter-start-date" class="form-control">
            </div>
            <div class="col-md-3 mb-2">
              <label class="form-label">Đến ngày</label>
              <input type="date" id="filter-end-date" class="form-control">
            </div>
            <div class="col-md-3 mb-2">
              <label class="form-label">Nguồn thu</label>
              <select id="filter-source" class="form-select">
                <option value="">Tất cả nguồn thu</option>
                <option value="salary">Lương</option>
                <option value="bonus">Thưởng</option>
                <option value="investment">Đầu tư</option>
                <option value="freelance">Freelance</option>
                <option value="gift">Quà tặng</option>
                <option value="other">Khác</option>
              </select>
            </div>
            <div class="col-md-3 mb-2 d-flex align-items-end">
              <button id="apply-filter" class="btn btn-primary me-2">Lọc</button>
              <button id="reset-filter" class="btn btn-outline-secondary">Đặt lại</button>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Mô tả</th>
                <th>Nguồn thu</th>
                <th>Ngày</th>
                <th class="text-end">Số tiền</th>
                <th class="text-center">Thao tác</th>
              </tr>
            </thead>
            <tbody id="income-list">
              <!-- Danh sách thu nhập sẽ được tải bằng JavaScript -->
              <tr>
                <td colspan="5" class="text-center">
                  <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                  </div>
                  <span class="ms-2">Đang tải dữ liệu...</span>
                </td>
              </tr>
            </tbody>
            <tfoot>
              <tr>
                <td colspan="3" class="text-end fw-bold">Tổng thu nhập:</td>
                <td id="total-amount" class="text-end fw-bold">0đ</td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal chỉnh sửa thu nhập -->
<div class="modal fade" id="editIncomeModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chỉnh sửa thu nhập</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="edit-income-form" class="row g-3">
          <input type="hidden" id="edit-id">
          <div class="col-md-12">
            <label for="edit-description" class="form-label">Mô tả</label>
            <input type="text" class="form-control" id="edit-description" required>
            <div class="invalid-feedback">Vui lòng nhập mô tả</div>
          </div>
          <div class="col-md-6">
            <label for="edit-amount" class="form-label">Số tiền</label>
            <div class="input-group">
              <input type="number" class="form-control" id="edit-amount" min="1000" step="1000" required>
              <span class="input-group-text">VND</span>
            </div>
            <div class="invalid-feedback">Số tiền phải lớn hơn 0</div>
          </div>
          <div class="col-md-6">
            <label for="edit-date" class="form-label">Ngày</label>
            <input type="date" class="form-control" id="edit-date" required>
            <div class="invalid-feedback">Vui lòng chọn ngày</div>
          </div>
          <div class="col-md-12">
            <label for="edit-source" class="form-label">Nguồn thu nhập</label>
            <select id="edit-source" class="form-select" required>
              <option value="">-- Chọn nguồn thu --</option>
              <option value="salary">Lương</option>
              <option value="bonus">Thưởng</option>
              <option value="investment">Đầu tư</option>
              <option value="freelance">Freelance</option>
              <option value="gift">Quà tặng</option>
              <option value="other">Khác</option>
            </select>
            <div class="invalid-feedback">Vui lòng chọn nguồn thu nhập</div>
          </div>
          <div class="col-md-12">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="edit-isRecurring">
              <label class="form-check-label" for="edit-isRecurring">
                Thu nhập lặp lại
              </label>
            </div>
          </div>
          <div class="col-md-12" id="edit-frequency-group" style="display: none;">
            <label class="form-label">Tần suất</label>
            <select id="edit-frequency" class="form-select">
              <option value="weekly">Hàng tuần</option>
              <option value="monthly" selected>Hàng tháng</option>
              <option value="yearly">Hàng năm</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Huỷ</button>
        <button type="button" class="btn btn-primary" id="save-edit-income">Lưu</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal xác nhận xóa thu nhập -->
<div class="modal fade" id="deleteIncomeModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Xác nhận xóa</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc chắn muốn xóa thu nhập này?</p>
        <input type="hidden" id="delete-id">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Huỷ</button>
        <button type="button" class="btn btn-danger" id="confirm-delete-income">Xóa</button>
      </div>
    </div>
  </div>
</div>

<script>
  const token = localStorage.getItem('token');
  let currentIncomes = [];

  // Toggle income form
  document.getElementById('toggleIncomeForm').addEventListener('click', function() {
    const formContainer = document.getElementById('income-form-container');
    const isHidden = formContainer.style.display === 'none';
    
    formContainer.style.display = isHidden ? 'block' : 'none';
    this.innerHTML = isHidden ? 
      '<i class="bi bi-dash"></i> Ẩn form' : 
      '<i class="bi bi-plus"></i> Mở form';
  });

  // Toggle recurring frequency
  document.getElementById('isRecurring').addEventListener('change', function() {
    document.getElementById('frequency-group').style.display = this.checked ? 'block' : 'none';
  });

  document.getElementById('edit-isRecurring').addEventListener('change', function() {
    document.getElementById('edit-frequency-group').style.display = this.checked ? 'block' : 'none';
  });

  // Function to load incomes
  function loadIncomes(filters = {}) {
    let url = '/api/incomes';
    
    // Add filters to URL if provided
    const params = new URLSearchParams();
    if (filters.startDate) params.append('startDate', filters.startDate);
    if (filters.endDate) params.append('endDate', filters.endDate);
    if (filters.source) params.append('source', filters.source);
    
    if (params.toString()) {
      url += '?' + params.toString();
    }
    
    fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => {
      if (response.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return response.json();
    })
    .then(incomes => {
      currentIncomes = incomes;
      const incomeList = document.getElementById('income-list');
      incomeList.innerHTML = '';
      
      if (incomes.length === 0) {
        incomeList.innerHTML = '<tr><td colspan="5" class="text-center py-3">Chưa có thu nhập nào được thêm</td></tr>';
        document.getElementById('total-amount').innerText = formatCurrency(0);
        return;
      }
      
      let total = 0;
      
      incomes.forEach(income => {
        total += income.amount;
        
        // Xác định icon cho nguồn thu nhập
        let sourceIcon = 'bi-cash';
        switch(income.source) {
          case 'salary': sourceIcon = 'bi-briefcase'; break;
          case 'bonus': sourceIcon = 'bi-gift'; break;
          case 'investment': sourceIcon = 'bi-graph-up-arrow'; break;
          case 'freelance': sourceIcon = 'bi-laptop'; break;
          case 'gift': sourceIcon = 'bi-box2-heart'; break;
          default: sourceIcon = 'bi-cash';
        }
        
        // Xác định tên nguồn thu nhập
        let sourceName = 'Khác';
        switch(income.source) {
          case 'salary': sourceName = 'Lương'; break;
          case 'bonus': sourceName = 'Thưởng'; break;
          case 'investment': sourceName = 'Đầu tư'; break;
          case 'freelance': sourceName = 'Freelance'; break;
          case 'gift': sourceName = 'Quà tặng'; break;
          default: sourceName = 'Khác';
        }
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${income.description}</td>
          <td>
            <i class="bi ${sourceIcon}"></i> ${sourceName}
            ${income.isRecurring ? '<span class="badge bg-success ms-1">Lặp lại</span>' : ''}
          </td>
          <td>${formatDate(income.date)}</td>
          <td class="text-end text-success fw-medium">${formatCurrency(income.amount)}</td>
          <td class="text-center">
            <button class="btn btn-icon btn-light me-1 edit-income" data-id="${income.id}" title="Sửa">
              <i class="bi bi-pencil-square"></i>
            </button>
            <button class="btn btn-icon btn-light delete-income" data-id="${income.id}" title="Xóa">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        `;
        
        incomeList.appendChild(tr);
      });
      
      document.getElementById('total-amount').innerText = formatCurrency(total);
      
      // Setup action buttons
      setupEditButtons();
      setupDeleteButtons();
    })
    .catch(error => {
      console.error('Lỗi khi tải thu nhập:', error);
      showAlert('danger', 'Không thể tải dữ liệu thu nhập: ' + error.message);
      document.getElementById('income-list').innerHTML = '<tr><td colspan="5" class="text-center text-danger">Lỗi khi tải dữ liệu thu nhập</td></tr>';
    });
  }

  // Setup edit buttons
  function setupEditButtons() {
    document.querySelectorAll('.edit-income').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const incomeId = this.getAttribute('data-id');
        editIncome(incomeId);
      });
    });
  }

  // Setup delete buttons
  function setupDeleteButtons() {
    document.querySelectorAll('.delete-income').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const incomeId = this.getAttribute('data-id');
        document.getElementById('delete-id').value = incomeId;
        const deleteIncomeModal = new bootstrap.Modal(document.getElementById('deleteIncomeModal'));
        deleteIncomeModal.show();
      });
    });
  }

  // Edit income
  function editIncome(incomeId) {
    const income = currentIncomes.find(i => i.id == incomeId);
    
    if (!income) return;
    
    document.getElementById('edit-id').value = income.id;
    document.getElementById('edit-description').value = income.description;
    document.getElementById('edit-amount').value = income.amount;
    document.getElementById('edit-source').value = income.source;
    document.getElementById('edit-date').value = income.date.split('T')[0];
    document.getElementById('edit-isRecurring').checked = income.isRecurring;
    
    if (income.isRecurring) {
      document.getElementById('edit-frequency-group').style.display = 'block';
      document.getElementById('edit-frequency').value = income.frequency || 'monthly';
    } else {
      document.getElementById('edit-frequency-group').style.display = 'none';
    }
    
    const editIncomeModal = new bootstrap.Modal(document.getElementById('editIncomeModal'));
    editIncomeModal.show();
  }

  // Add income form submit
  document.getElementById('income-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const description = document.getElementById('description').value;
    const amount = document.getElementById('amount').value;
    const date = document.getElementById('date').value;
    const source = document.getElementById('source').value;
    const isRecurring = document.getElementById('isRecurring').checked;
    const frequency = isRecurring ? document.getElementById('frequency').value : null;
    
    // Validate form
    if (!validateIncomeForm('income-form')) return;
    
    // Submit income
    fetch('/api/incomes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        description,
        amount,
        date,
        source,
        isRecurring,
        frequency
      })
    })
    .then(response => {
      if (response.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Thu nhập đã được thêm thành công!');
        document.getElementById('income-form').reset();
        document.getElementById('date').value = new Date().toISOString().split('T')[0];
        document.getElementById('frequency-group').style.display = 'none';
        loadIncomes();
      } else {
        showAlert('danger', data.error || 'Không thể thêm thu nhập');
      }
    })
    .catch(error => {
      console.error('Lỗi khi thêm thu nhập:', error);
      showAlert('danger', 'Lỗi khi thêm thu nhập: ' + error.message);
    });
  });

  // Save edit income
  document.getElementById('save-edit-income').addEventListener('click', function() {
    const incomeId = document.getElementById('edit-id').value;
    const description = document.getElementById('edit-description').value;
    const amount = document.getElementById('edit-amount').value;
    const date = document.getElementById('edit-date').value;
    const source = document.getElementById('edit-source').value;
    const isRecurring = document.getElementById('edit-isRecurring').checked;
    const frequency = isRecurring ? document.getElementById('edit-frequency').value : null;
    
    // Validate form
    if (!validateIncomeForm('edit-income-form')) return;
    
    // Update income
    fetch(`/api/incomes/${incomeId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        description,
        amount,
        date,
        source,
        isRecurring,
        frequency
      })
    })
    .then(response => {
      if (response.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Thu nhập đã được cập nhật thành công!');
        bootstrap.Modal.getInstance(document.getElementById('editIncomeModal')).hide();
        loadIncomes(getFilters());
      } else {
        showAlert('danger', data.error || 'Không thể cập nhật thu nhập');
      }
    })
    .catch(error => {
      console.error('Lỗi khi cập nhật thu nhập:', error);
      showAlert('danger', 'Lỗi khi cập nhật thu nhập: ' + error.message);
    });
  });

  // Delete income
  document.getElementById('confirm-delete-income').addEventListener('click', function() {
    const incomeId = document.getElementById('delete-id').value;
    
    fetch(`/api/incomes/${incomeId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => {
      if (response.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Thu nhập đã được xóa thành công!');
        bootstrap.Modal.getInstance(document.getElementById('deleteIncomeModal')).hide();
        loadIncomes(getFilters());
      } else {
        showAlert('danger', data.error || 'Không thể xóa thu nhập');
      }
    })
    .catch(error => {
      console.error('Lỗi khi xóa thu nhập:', error);
      showAlert('danger', 'Lỗi khi xóa thu nhập: ' + error.message);
    });
  });

  // Clear income form
  document.getElementById('clear-income-form').addEventListener('click', function() {
    document.getElementById('income-form').reset();
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
    document.getElementById('frequency-group').style.display = 'none';
  });

  // Apply filter
  document.getElementById('apply-filter').addEventListener('click', function() {
    loadIncomes(getFilters());
  });

  // Reset filter
  document.getElementById('reset-filter').addEventListener('click', function() {
    document.getElementById('filter-start-date').value = '';
    document.getElementById('filter-end-date').value = '';
    document.getElementById('filter-source').value = '';
    loadIncomes();
  });

  // Get current filters
  function getFilters() {
    return {
      startDate: document.getElementById('filter-start-date').value,
      endDate: document.getElementById('filter-end-date').value,
      source: document.getElementById('filter-source').value
    };
  }

  // Validate income form
  function validateIncomeForm(formId) {
    const form = document.getElementById(formId);
    const inputs = form.querySelectorAll('input[required], select[required]');
    let isValid = true;
    
    inputs.forEach(input => {
      if (!input.value.trim()) {
        input.classList.add('is-invalid');
        isValid = false;
      } else {
        input.classList.remove('is-invalid');
      }
    });
    
    // Validate amount specifically
    const amountInput = form.querySelector('input[type="number"]');
    if (parseFloat(amountInput.value) <= 0) {
      amountInput.classList.add('is-invalid');
      isValid = false;
    }
    
    return isValid;
  }

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    // Set default date to today
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
    
    // Load incomes
    loadIncomes();
  });
</script>
