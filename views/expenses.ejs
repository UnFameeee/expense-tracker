<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Thêm chi tiêu mới</h5>
        <button type="button" class="btn btn-sm btn-outline-primary" id="toggleExpenseForm">
          <i class="bi bi-plus"></i> Mở form
        </button>
      </div>
      <div class="card-body" id="expense-form-container" style="display: none;">
        <form id="expense-form" class="row g-3">
          <div class="col-md-6">
            <label for="description" class="form-label">Mô tả</label>
            <input type="text" class="form-control" id="description" required>
            <div class="invalid-feedback">Vui lòng nhập mô tả</div>
          </div>
          <div class="col-md-3">
            <label for="amount" class="form-label">Số tiền</label>
            <div class="input-group">
              <input type="number" class="form-control" id="amount" min="1000" step="1000" required>
              <span class="input-group-text">VND</span>
            </div>
            <div class="invalid-feedback">Số tiền phải lớn hơn 0</div>
          </div>
          <div class="col-md-3">
            <label for="date" class="form-label">Ngày</label>
            <input type="date" class="form-control" id="date" required>
            <div class="invalid-feedback">Vui lòng chọn ngày</div>
          </div>
          <div class="col-md-6">
            <label for="categoryId" class="form-label">Danh mục</label>
            <select id="categoryId" class="form-select">
              <option value="">-- Chọn danh mục --</option>
              <!-- Danh mục sẽ được tải bằng JavaScript -->
            </select>
          </div>
          <div class="col-12 mt-3">
            <button type="submit" class="btn btn-primary" id="submit-expense">Lưu</button>
            <button type="button" class="btn btn-outline-secondary" id="clear-expense-form">Xóa form</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">Danh sách chi tiêu</h5>
      </div>
      <div class="card-body">
        <div class="expense-filter mb-4">
          <div class="row">
            <div class="col-md-3 mb-2">
              <label class="form-label">Từ ngày</label>
              <input type="date" id="filter-start-date" class="form-control">
            </div>
            <div class="col-md-3 mb-2">
              <label class="form-label">Đến ngày</label>
              <input type="date" id="filter-end-date" class="form-control">
            </div>
            <div class="col-md-3 mb-2">
              <label class="form-label">Danh mục</label>
              <select id="filter-category" class="form-select">
                <option value="">Tất cả danh mục</option>
                <!-- Danh mục sẽ được tải bằng JavaScript -->
              </select>
            </div>
            <div class="col-md-3 mb-2 d-flex align-items-end">
              <button id="apply-filter" class="btn btn-primary me-2">Lọc</button>
              <button id="reset-filter" class="btn btn-outline-secondary">Đặt lại</button>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Mô tả</th>
                <th>Danh mục</th>
                <th>Ngày</th>
                <th class="text-end">Số tiền</th>
                <th class="text-center">Thao tác</th>
              </tr>
            </thead>
            <tbody id="expense-list">
              <!-- Danh sách chi tiêu sẽ được tải bằng JavaScript -->
              <tr>
                <td colspan="5" class="text-center">
                  <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                  </div>
                  <span class="ms-2">Đang tải dữ liệu...</span>
                </td>
              </tr>
            </tbody>
            <tfoot>
              <tr>
                <td colspan="3" class="text-end fw-bold">Tổng chi tiêu:</td>
                <td id="total-amount" class="text-end fw-bold">0</td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal chỉnh sửa chi tiêu -->
<div class="modal fade" id="editExpenseModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chỉnh sửa chi tiêu</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="edit-expense-form" class="row g-3">
          <input type="hidden" id="edit-id">
          <div class="col-md-12">
            <label for="edit-description" class="form-label">Mô tả</label>
            <input type="text" class="form-control" id="edit-description" required>
            <div class="invalid-feedback">Vui lòng nhập mô tả</div>
          </div>
          <div class="col-md-6">
            <label for="edit-amount" class="form-label">Số tiền</label>
            <div class="input-group">
              <input type="number" class="form-control" id="edit-amount" min="1000" step="1000" required>
              <span class="input-group-text">VND</span>
            </div>
            <div class="invalid-feedback">Số tiền phải lớn hơn 0</div>
          </div>
          <div class="col-md-6">
            <label for="edit-date" class="form-label">Ngày</label>
            <input type="date" class="form-control" id="edit-date" required>
            <div class="invalid-feedback">Vui lòng chọn ngày</div>
          </div>
          <div class="col-md-12">
            <label for="edit-categoryId" class="form-label">Danh mục</label>
            <select id="edit-categoryId" class="form-select">
              <option value="">-- Chọn danh mục --</option>
              <!-- Danh mục sẽ được tải bằng JavaScript -->
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-primary" id="save-edit-expense">Lưu</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal xóa chi tiêu -->
<div class="modal fade" id="deleteExpenseModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Xóa chi tiêu</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc chắn muốn xóa chi tiêu này?</p>
        <input type="hidden" id="delete-id">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-danger" id="confirm-delete-expense">Xóa</button>
      </div>
    </div>
  </div>
</div>

<script>
  const token = localStorage.getItem('token');
  let categories = [];
  let currentExpenses = [];

  // Toggle expense form
  document.getElementById('toggleExpenseForm').addEventListener('click', function() {
    const formContainer = document.getElementById('expense-form-container');
    const isHidden = formContainer.style.display === 'none';
    
    formContainer.style.display = isHidden ? 'block' : 'none';
    this.innerHTML = isHidden ? 
      '<i class="bi bi-dash"></i> Đóng form' : 
      '<i class="bi bi-plus"></i> Mở form';
  });

  // Function to load categories
  function loadCategories() {
    fetch('/api/categories', {
      headers: {
        'Authorization': 'Bearer ' + token
      }
    })
    .then(res => {
      if(res.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return res.json();
    })
    .then(data => {
      if (!data) return;
      
      categories = data;
      
      // Populate category select elements
      const categorySelects = ['categoryId', 'edit-categoryId', 'filter-category'];
      
      categorySelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (!select) return;
        
        // Keep the first option and remove others
        while (select.options.length > 1) {
          select.remove(1);
        }
        
        // Add categories to the select
        categories.forEach(category => {
          const option = document.createElement('option');
          option.value = category.id;
          option.textContent = category.name;
          select.appendChild(option);
        });
      });
    })
    .catch(err => {
      console.error('Lỗi khi tải danh mục:', err);
      showAlert('danger', 'Không thể tải danh mục. Vui lòng thử lại sau.');
    });
  }

  // Function to load expenses
  function loadExpenses(filters = {}) {
    let url = '/api/expenses';
    
    // Add filters to URL if provided
    const params = new URLSearchParams();
    if (filters.startDate) params.append('startDate', filters.startDate);
    if (filters.endDate) params.append('endDate', filters.endDate);
    if (filters.categoryId) params.append('categoryId', filters.categoryId);
    
    if (params.toString()) {
      url += '?' + params.toString();
    }
    
    fetch(url, {
      headers: {
        'Authorization': 'Bearer ' + token
      }
    })
    .then(res => {
      if(res.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return res.json();
    })
    .then(data => {
      if (!data) return;
      
      currentExpenses = data;
      
      const list = document.getElementById('expense-list');
      list.innerHTML = '';
      
      if (data.length === 0) {
        list.innerHTML = '<tr><td colspan="5" class="text-center py-3">Không có chi tiêu nào</td></tr>';
        document.getElementById('total-amount').innerText = formatCurrency(0);
        return;
      }
      
      let total = 0;
      
      data.forEach(item => {
        total += item.amount;
        
        // Find category
        const category = categories.find(c => c.id === item.categoryId);
        const categoryDisplay = category ? 
          `<span style="color: ${category.color}"><i class="bi ${category.icon}"></i> ${category.name}</span>` : 
          '<span class="text-muted">Chưa phân loại</span>';
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${item.description}</td>
          <td>${categoryDisplay}</td>
          <td>${formatDate(item.date)}</td>
          <td class="text-end amount">${formatCurrency(item.amount)}</td>
          <td class="text-center">
            <button class="btn btn-icon btn-light me-1 edit-expense" data-id="${item.id}" title="Sửa">
              <i class="bi bi-pencil-square"></i>
            </button>
            <button class="btn btn-icon btn-light delete-expense" data-id="${item.id}" title="Xóa">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        `;
        
        list.appendChild(tr);
      });
      
      document.getElementById('total-amount').innerText = formatCurrency(total);
      
      // Setup action buttons
      setupEditButtons();
      setupDeleteButtons();
    })
    .catch(err => {
      console.error('Lỗi khi tải chi tiêu:', err);
      const list = document.getElementById('expense-list');
      list.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Lỗi khi tải dữ liệu chi tiêu</td></tr>';
    });
  }

  // Setup edit buttons
  function setupEditButtons() {
    document.querySelectorAll('.edit-expense').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        const expense = currentExpenses.find(e => e.id == id);
        
        if(expense) {
          document.getElementById('edit-id').value = expense.id;
          document.getElementById('edit-description').value = expense.description;
          document.getElementById('edit-amount').value = expense.amount;
          document.getElementById('edit-date').value = expense.date.split('T')[0];
          document.getElementById('edit-categoryId').value = expense.categoryId || '';
          
          const editModal = new bootstrap.Modal(document.getElementById('editExpenseModal'));
          editModal.show();
        }
      });
    });
  }

  // Setup delete buttons
  function setupDeleteButtons() {
    document.querySelectorAll('.delete-expense').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        document.getElementById('delete-id').value = id;
        
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteExpenseModal'));
        deleteModal.show();
      });
    });
  }

  // Add expense form submit
  document.getElementById('expense-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const description = document.getElementById('description').value;
    const amount = document.getElementById('amount').value;
    const date = document.getElementById('date').value;
    const categoryId = document.getElementById('categoryId').value;
    
    // Validate form
    if (!validateExpenseForm('expense-form')) return;
    
    // Submit expense
    fetch('/api/expenses', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        description,
        amount,
        date,
        categoryId: categoryId || null
      })
    })
    .then(res => {
      if (res.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Chi tiêu đã được thêm thành công!');
        document.getElementById('expense-form').reset();
        document.getElementById('date').value = new Date().toISOString().split('T')[0];
        loadExpenses();
      } else {
        showAlert('danger', data.error || 'Lỗi khi thêm chi tiêu');
      }
    })
    .catch(err => {
      console.error('Lỗi khi thêm chi tiêu:', err);
      showAlert('danger', 'Lỗi khi thêm chi tiêu. Vui lòng thử lại sau.');
    });
  });

  // Save edit expense
  document.getElementById('save-edit-expense').addEventListener('click', function() {
    const id = document.getElementById('edit-id').value;
    const description = document.getElementById('edit-description').value;
    const amount = document.getElementById('edit-amount').value;
    const date = document.getElementById('edit-date').value;
    const categoryId = document.getElementById('edit-categoryId').value;
    
    // Validate form
    if (!validateExpenseForm('edit-expense-form')) return;
    
    // Update expense
    fetch(`/api/expenses/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        description,
        amount,
        date,
        categoryId: categoryId || null
      })
    })
    .then(res => {
      if (res.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Chi tiêu đã được cập nhật thành công!');
        bootstrap.Modal.getInstance(document.getElementById('editExpenseModal')).hide();
        loadExpenses(getFilters());
      } else {
        showAlert('danger', data.error || 'Lỗi khi cập nhật chi tiêu');
      }
    })
    .catch(err => {
      console.error('Lỗi khi cập nhật chi tiêu:', err);
      showAlert('danger', 'Lỗi khi cập nhật chi tiêu. Vui lòng thử lại sau.');
    });
  });

  // Confirm delete expense
  document.getElementById('confirm-delete-expense').addEventListener('click', function() {
    const id = document.getElementById('delete-id').value;
    
    fetch(`/api/expenses/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer ' + token
      }
    })
    .then(res => {
      if (res.status === 401) {
        localStorage.removeItem('token');
        window.location.href = '/login';
        return;
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        showAlert('success', 'Chi tiêu đã được xóa thành công!');
        bootstrap.Modal.getInstance(document.getElementById('deleteExpenseModal')).hide();
        loadExpenses(getFilters());
      } else {
        showAlert('danger', data.error || 'Lỗi khi xóa chi tiêu');
      }
    })
    .catch(err => {
      console.error('Lỗi khi xóa chi tiêu:', err);
      showAlert('danger', 'Lỗi khi xóa chi tiêu. Vui lòng thử lại sau.');
    });
  });

  // Clear expense form
  document.getElementById('clear-expense-form').addEventListener('click', function() {
    document.getElementById('expense-form').reset();
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
  });

  // Apply filter
  document.getElementById('apply-filter').addEventListener('click', function() {
    loadExpenses(getFilters());
  });

  // Reset filter
  document.getElementById('reset-filter').addEventListener('click', function() {
    document.getElementById('filter-start-date').value = '';
    document.getElementById('filter-end-date').value = '';
    document.getElementById('filter-category').value = '';
    loadExpenses();
  });

  // Get current filters
  function getFilters() {
    return {
      startDate: document.getElementById('filter-start-date').value,
      endDate: document.getElementById('filter-end-date').value,
      categoryId: document.getElementById('filter-category').value
    };
  }

  // Validate expense form
  function validateExpenseForm(formId) {
    const form = document.getElementById(formId);
    const inputs = form.querySelectorAll('input[required], select[required]');
    let isValid = true;
    
    inputs.forEach(input => {
      if (!input.value.trim()) {
        input.classList.add('is-invalid');
        isValid = false;
      } else {
        input.classList.remove('is-invalid');
      }
    });
    
    // Validate amount specifically
    const amountInput = form.querySelector('input[type="number"]');
    if (parseFloat(amountInput.value) <= 0) {
      amountInput.classList.add('is-invalid');
      isValid = false;
    }
    
    return isValid;
  }

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    // Set default date to today
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
    
    // Load categories and expenses
    loadCategories();
    loadExpenses();
  });
</script>
